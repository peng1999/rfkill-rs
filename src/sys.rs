/* automatically generated by rust-bindgen 0.60.1 */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const RFKILL_STATE_SOFT_BLOCKED: u32 = 0;
pub const RFKILL_STATE_UNBLOCKED: u32 = 1;
pub const RFKILL_STATE_HARD_BLOCKED: u32 = 2;
pub const RFKILL_EVENT_SIZE_V1: u32 = 8;
pub const RFKILL_IOC_MAGIC: u8 = 82u8;
pub const RFKILL_IOC_NOINPUT: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    fn test_field_fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__kernel_fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    test_field_fds_bits();
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    fn test_field_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__kernel_fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_fsid_t),
                "::",
                stringify!(val)
            )
        );
    }
    test_field_val();
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub const rfkill_type_RFKILL_TYPE_ALL: rfkill_type = 0;
pub const rfkill_type_RFKILL_TYPE_WLAN: rfkill_type = 1;
pub const rfkill_type_RFKILL_TYPE_BLUETOOTH: rfkill_type = 2;
pub const rfkill_type_RFKILL_TYPE_UWB: rfkill_type = 3;
pub const rfkill_type_RFKILL_TYPE_WIMAX: rfkill_type = 4;
pub const rfkill_type_RFKILL_TYPE_WWAN: rfkill_type = 5;
pub const rfkill_type_RFKILL_TYPE_GPS: rfkill_type = 6;
pub const rfkill_type_RFKILL_TYPE_FM: rfkill_type = 7;
pub const rfkill_type_RFKILL_TYPE_NFC: rfkill_type = 8;
pub const rfkill_type_NUM_RFKILL_TYPES: rfkill_type = 9;
pub type rfkill_type = ::std::os::raw::c_uint;
pub const rfkill_operation_RFKILL_OP_ADD: rfkill_operation = 0;
pub const rfkill_operation_RFKILL_OP_DEL: rfkill_operation = 1;
pub const rfkill_operation_RFKILL_OP_CHANGE: rfkill_operation = 2;
pub const rfkill_operation_RFKILL_OP_CHANGE_ALL: rfkill_operation = 3;
pub type rfkill_operation = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct rfkill_event {
    pub idx: __u32,
    pub type_: __u8,
    pub op: __u8,
    pub soft: __u8,
    pub hard: __u8,
}
#[test]
fn bindgen_test_layout_rfkill_event() {
    assert_eq!(
        ::std::mem::size_of::<rfkill_event>(),
        8usize,
        concat!("Size of: ", stringify!(rfkill_event))
    );
    assert_eq!(
        ::std::mem::align_of::<rfkill_event>(),
        1usize,
        concat!("Alignment of ", stringify!(rfkill_event))
    );
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rfkill_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rfkill_event),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rfkill_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rfkill_event),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rfkill_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(rfkill_event),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_soft() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rfkill_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).soft) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rfkill_event),
                "::",
                stringify!(soft)
            )
        );
    }
    test_field_soft();
    fn test_field_hard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rfkill_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hard) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(rfkill_event),
                "::",
                stringify!(hard)
            )
        );
    }
    test_field_hard();
}
